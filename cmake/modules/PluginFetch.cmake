# @brief plugin_detect_backend internal function
# @param out_platform
# @param out_available_backends
function(plugin_detect_backend out_platform out_available_backends)
	if(CMAKE_SYSTEM_NAME MATCHES "Linux")
		set(${out_platform} "Linux" PARENT_SCOPE)
		set(_detected_backends "VST3")
	elseif(CMAKE_SYSTEM_NAME MATCHES "Darwin")
		set(${out_platform} "MacOS" PARENT_SCOPE)
		set(_detected_backends "AAX" "AUV2" "AUV3" "VST2" "VST3")
	elseif(CMAKE_SYSTEM_NAME MATCHES "Windows")
		set(${out_platform} "Windows" PARENT_SCOPE)
		set(_detected_backends "AAX" "VST2" "VST3")
	elseif(CMAKE_SYSTEM_NAME MATCHES "Android")
		message(FATAL_ERROR "[libaudioplugin] Platform ${CMAKE_SYSTEM_NAME} not yet supported")
	elseif(CMAKE_SYSTEM_NAME MATCHES "iOS")
		message(FATAL_ERROR "[libaudioplugin] Platform ${CMAKE_SYSTEM_NAME} not yet supported")
	else()
		message(FATAL_ERROR "[libaudioplugin] Invalid platform ${CMAKE_SYSTEM_NAME}")
	endif()
	set(${out_available_backends} ${_detected_backends} PARENT_SCOPE)
endfunction()

# @brief plugin_fetch_sdk internal function
# @param available_backends
# @param aaxsdk
# @param coreaudiosdk
function(plugin_fetch_sdk list_available_backends aaxsdk coreaudiosdk)
	if("AAX" IN_LIST list_available_backends)
		if(NOT EXISTS "${aaxsdk}/Interfaces/AAX.h")
			if(IS_DIRECTORY "${aaxsdk}")
				message("-- [libaudioplugin] Invalid AAX SDK at ${aaxsdk}")
				file(REMOVE_RECURSE "${aaxsdk}")
			endif()
			set(_sdk_name "aaxsdk")
			set(_sdk_url "https://learn-cdn.avid.com/cpp_toolkits/aax-sdk-2-5-1.zip")
			set(_sdk_download_path "${CMAKE_BINARY_DIR}/fetch_cache/zip/${_sdk_name}.zip")
			set(_sdk_extract_path "${CMAKE_BINARY_DIR}/fetch_cache/extracted/${_sdk_name}")
			set(_sdk_nested_path "${_sdk_extract_path}/aax-sdk-2-5-1")
			message("-- [libaudioplugin] Downloading AAX SDK from ${_sdk_url}")
			file(DOWNLOAD ${_sdk_url} ${_sdk_download_path})			
			file(ARCHIVE_EXTRACT INPUT ${_sdk_download_path} DESTINATION ${_sdk_extract_path})
			file(RENAME ${_sdk_nested_path} ${aaxsdk})
			file(REMOVE ${_sdk_download_path})
			file(REMOVE_RECURSE ${_sdk_extract_path})
		endif()
	endif()
	if("AUV2" IN_LIST list_available_backends OR "AUV3" IN_LIST list_available_backends)
		if(NOT EXISTS "${coreaudiosdk}/AudioUnits/AUPublic/AUBase/AUBase.cpp")
			if(IS_DIRECTORY "${coreaudiosdk}")
				message("-- [libaudioplugin] Invalid CoreAudio SDK at ${coreaudiosdk}")
				file(REMOVE_RECURSE ${coreaudiosdk})
			endif()
			set(_sdk_name "coreaudiosdk")
			set(_sdk_url "https://developer.apple.com/library/archive/samplecode/CoreAudioUtilityClasses/CoreAudioUtilityClasses.zip")
			set(_sdk_download_path "${CMAKE_BINARY_DIR}/fetch_cache/zip/${_sdk_name}.zip")
			set(_sdk_extract_path "${CMAKE_BINARY_DIR}/fetch_cache/extracted/${_sdk_name}")
			set(_sdk_nested_path "${_sdk_extract_path}/CoreAudioUtilityClasses/CoreAudio")
			message("-- [libaudioplugin] Downloading CoreAudio SDK from ${_sdk_url}")
			file(DOWNLOAD ${_sdk_url} ${_sdk_download_path})			
			file(ARCHIVE_EXTRACT INPUT ${_sdk_download_path} DESTINATION ${_sdk_extract_path})
			file(RENAME ${_sdk_nested_path} ${coreaudiosdk})
			file(REMOVE ${_sdk_download_path})
			file(REMOVE_RECURSE ${_sdk_extract_path})
		endif()
	endif()
endfunction()

